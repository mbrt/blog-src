#+TITLE: Antifurto notes

* Overview
** Motivations and intro
*** why the project started
*** what kind of problem is trying to solve
*** for who is this for
*** why opensource

** Architecture
There are the following components in Antifurto:
+ =antifurto= executable, written in C++
+ =antifurto.fgci= executable, written in C++
+ the web interface, written in PHP + bootstrap
+ a bash script to send e-mails
+ a bunch of third party python scripts to send whatsapp messages and upload
  pictures to Dropbox.

The design is heavily based on [[https://en.wikipedia.org/wiki/Observer_pattern][observers]], [[https://en.wikipedia.org/wiki/Type_erasure][type erasure]] and the [[https://en.wikipedia.org/wiki/Composition_over_inheritance][composite reuse
principle]], to minimize dependencies among components. Well, at least it was an
attempt I made to implement the project with those principles in mind.

*NOTE* block diagram with the flow of pictures here. Explain the interactions
between live view and monitoring functionalities.

*** Critique on the design
+ Not safe to put everything in the device, included the server part. This has
  been done to avoid external services.

* Antifurto main executable
** Antifurto class
This class is responsible to start and stop the monitoring and the live view,
orchestrating the resources involved. It uses a ~Config~ structure for the
configuration. It can be used as an external library, since it is
self-contained.

It contains a ~MonitorController~, a ~CameraController~ and a
~LiveViewController~.

Interesting stuff:
+ the way it handles start and stop
+ it uses PIMPL pattern to hide all the dependencies to the outside

** MonitorController
This class is the main controller that handls the monitoring functionality. It
delegates to its sub-components tasks such as motion detection, and
notification. Whenever a picture is captured, it is passed along by calling
~examinePicture~:

#+BEGIN_SRC c++
  void examinePicture(const Picture& picture);
#+END_SRC

Whenever some motion is detected, the capture rate is increased, and if the
motion continues, the notifications are fired.

Interesting stuff:
+ it uses two callbacks to ask for a change in the capture rate, and for
  enabling / disabling the capture.

** MotionDetector
This class uses the [[http://opencv.org/][OpenCV]] library to examine the pictures flow and determines
when there is something moving. It implements the observer pattern to notify the
observers for the current state. The motion detection code is pretty simple:

#+BEGIN_SRC c++
  cv::absdiff(curr_, p, currDiff_);
  cv::bitwise_and(prevDiff_, currDiff_, motion_);
  if (motionHappened())
      onMotionDetected();
  else
      onNoMotion();
  // save
  std::swap(prevDiff_, currDiff_);
  curr_ = p;
#+END_SRC

The code works with three pictures: the current one and the two previous. Two
images are computed out of them by making a difference (i.e. subtracting the
gray values of the pixels one by one) between the first with the second and the
second with the third. Then a bitwise and is computed between them. Random noise
will be filtered out, since it's unlikely to stay among three frames and the
image will be almost completely black. Whenever something moves however, certain
areas of the pictures will differ in the three frames, and so the difference
will produce white pixels. These pixels are then counted in ~motionHappened~,
and if they reach a certain number, then some motion is detected.

There is an additional layer of protection against errors, and it's a state
machine that counts how many consecutive moving pictures have been detected.
These states are used to better control:
+ energy saving
+ picture capturing
+ alarm notifications

*NOTE* diagram here

** RecordingController
This class is responsible of managing the registration of the pictures while an
alarm is active. It accepts pictures with ~void addPicture(Picture p)~ and
registers to the [[MotionDetector]] to know when to start and stop the recording.
The recording is done by saving jpeg pictures on the local file system (by using
[[PictureArchive]]) and uploading them to Dropbox (by using [[DropboxUploader]]).

#+BEGIN_SRC c++
  void RecordingController::onAlarmStateChanged(MotionDetector::State state)
  {
      using State = MotionDetector::State;
      switch (state) {
      case State::NO_MOTION:
          archive_.stopSaving();
          break;
      case State::NO_ALARM:
          enqueueOlderPictures();
          break;
      case State::ALARM:
          archive_.startSaving();
          break;
      case State::PRE_ALARM:
      default:
          break;
      }
  }
#+END_SRC

Whenever the motion detector notifies this class about an alarm, it starts to
save the pictures. When there is no motion involved (even if the alarm is still
active), the recording is stopped.

Saving pictures in real time is important, both on the disk and online. If there
is a slow upload for any reason, the queue between the producer (the [[Camera]]) and
the consumer grows. This would mean that by looking at the pictures online, the
delay between capture and upload will grow more and more over time during
alarms. To avoid this behavior, the queue size is limited, and whenever it is
full, the coming pictures are queued in a secondary one:

#+BEGIN_SRC c++
  void RecordingController::onPictureSaved(const std::string& fileName)
  {
      if (!uploadWorker_.enqueue(fileName)) {
          log::info() << "Failed to upload picture to Dropbox: queue is full";
          std::unique_lock<std::mutex> lock(toUploadAfterQueueMutex_);
          toUploadAfterQueue_.emplace(fileName);
      }
  }
#+END_SRC

This ensures a fixed maximum delay between capture and upload. All the missing
pictures are instead uploaded when the situation is more quiet, and the alarm is
not active (the ~case State::NO_ALARM:~ above):

#+BEGIN_SRC c++
  while (!toUploadAfterQueue_.empty()) {
      if (uploadWorker_.enqueue(toUploadAfterQueue_.front()))
          toUploadAfterQueue_.pop();
      else
          break;
  }
  // if the queue is not empty, we need to schedule an upload after
  if (!toUploadAfterQueue_.empty()) {
      log::info() << "Cannot empty the upload queue. Schedule a new upload";
      scheduler_.scheduleAfter(std::chrono::minutes(10), [this] {
            enqueueOlderPictures();
      });
   }
#+END_SRC

The logic is a bit brutal but it works. While there is still something to
upload, it adds the pictures to the upload queue. If the queue gets full again,
a new procedure is scheduled after ten minutes.

There is another maintenance procedure, to avoid a full hard drive. Every 24
hours, older pictures are removed. Depending on the configuration, only up to a
certain amount of days is kept:

#+BEGIN_SRC c++
  // schedule maintenance at every midnight
  using namespace std::chrono;
  auto maintenanceWork = [this] { performMaintenance(); };
  scheduler_.scheduleAt(concurrency::tomorrow() + minutes(1), [=] {
      performMaintenance();
      scheduler_.scheduleEvery(hours(24), maintenanceWork);
  });
#+END_SRC

** PictureArchive
This class saves pictures in Jpeg format to a given folder. It takes a stream of
pictures, and two commands, ~startSaving~ and ~stopSaving~. When the recording
is started, not only the next picture is saved, but also some of the previous.
This objects has indeed a fixed sized circular buffer that allows to
retroactively save images right before an alarm pops up. It also allows
observers to register for when a picture is saved to disk, getting the file
name.

#+BEGIN_SRC c++
  void PictureArchive::save(Picture& p, Clock t)
  {
      std::string filename{ fs::concatPaths(currentFolder_,
          text::toString(t, text::ToStringFormat::FULL, '-', '_') + ".jpg")};

      cv::putText(p, text::toString(t, text::ToStringFormat::SHORT, '/', ' '),
                  cv::Point(30,30), CV_FONT_HERSHEY_COMPLEX_SMALL, 0.8,
                  cv::Scalar(200,200,250), 1, CV_AA);
      cv::imwrite(filename, p, {CV_IMWRITE_JPEG_QUALITY, 90});
      notifyObservers(filename);
  }
#+END_SRC

The picture gets an overlapping timestamp on the top left corner and then are
saved on the disk.

Notes:
+ the ring buffer is very crappy

** DropboxUploader
This class is responsible for uploading files to a Dropbox account, by using an
external =dropbox_uploader.sh= script. It just generates a configure file for
Dropbox uploader starting from the Antifurto's configuration, and uploads a file
when requested, by launching an external process.

** WhatsappNotifier
This class manages Whatsupp notifications. Whenever ~send(std::string const&
dest, std::string const& msg)~ is called, it sends a message with [[https://github.com/mbrt/yowsup][yowsup-cli]] by
spawning an external process. This class just generates the configuration file
needed by Yowsup from the main process configuration and takes care of its
execution.

** MailNotifier
This class is responsible to send e-mails.

#+BEGIN_SRC c++
  void send(ContactList const& dest,
            std::string const& sender,
            std::string const& subject,
            std::string const& body);
#+END_SRC

It calls an external bash script that uses the Unix =mail= utility, to send the
mail.

** CameraController
This class is responsible to take pictures from a camera at a given rate. An
user of this class can register an observer and specify the rate at which the
pictures have to be taken. Every time a picture is taken, the observer callback
is called. If multiple observers are interested in different capture rates, the
minimum rate is used. This means that an observer specifies the minimum speed,
not the exact one.

To implement this functionality, in a separate thread a ~Metronome~ class sleeps
the required time, and then the ~Camera~ class takes a picture. Every time an
observer is registered or de-registered, the sleep time is updated.

** Camera
The camera type is statically determined in =StaticConfig.hpp=. In the
Raspberry-Pi case, there is a homegrown version implemented by ~PiCamera~, that
uses a slightly modified version of the =picam= library, that I found [[http://robotblogging.blogspot.nl/2013/10/an-efficient-and-simple-c-api-for.html][here]]. This
library is a simple interface on top of the Raspberry [[https://github.com/mbrt/userland][userland]] library I forked
just to ease the build. To capture images outside the Raspberry world I instead
opted for the [[http://opencv.org/][OpenCV]] library and implemented ~CvCamera~. Now, I have to admit
that the ~CvCaptureRAII~ class might look a bit weird, but it was an attempt to
implement the camera resource through [[https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization][RAII]]. I took inspiration from Martinho
Fernandez [[https://rmf.io/cxx11/rule-of-zero][rule of zero]] blog post and the [[http://scottmeyers.blogspot.nl/2014/03/a-concern-about-rule-of-zero.html][concern about the rule of zero]] by Scott
Meyers. To discuss this in detail I would need an entire blog post in itself, so
I'll just point you to these valuable resources. To be honest I'm not very
satisfied by its look and feel now, so maybe refer to the ~PiCamera~
implementation, it's just a one liner:

#+BEGIN_SRC c++
  std::unique_ptr<CCamera, void(*)(CCamera*)> capture_;
#+END_SRC

It uses the non-so-well-known custom deleter feature of ~std::unique_ptr~.
Again, look at Fernandez post for an explanation on why I didn't just
implemented a stupid destructor for ~PiCamera~.

Since these two different implementations are not intended to be used in the
same codebase, I didn't introduce any common interface, and just used a compile
time define and a ~typedef~ to switch between them:

#+BEGIN_SRC c++
  namespace antifurto {
  namespace config {

  #if defined(ANTIFURTO_RASPBERRY)
      using Camera = antifurto::PiCamera;
  #else
      using Camera = antifurto::CvCamera;
  #endif

  }}
#+END_SRC

The code will simply refer to the ~antifurto::config::Camera~ type to get a
capture resource. I just needed to make sure their public interface (i.e. the
public methods) are the same, so the two classes could be used interchangeably.

** LiveViewController
This class starts and stops the live view functionality. It doesn't implement
the functionality itself; it just controls the lifetime of a ~LiveView~ object.
From the outside it takes pictures and start and stop commands. Whenever a
picture comes, it is forwarded to the internal ~LiveView~ object, which in turn
answer if it has been able to process the picture or not. After a certain
timeout with the live view not progressing, the view is stopped:

#+BEGIN_SRC c++
  if (liveView_->addPicture(p))
      lastPictureWrittenTime_ = system_clock::now();
  else if (system_clock::now() - lastPictureWrittenTime_ > timeout_)
      stop();
#+END_SRC

The ~stop~ function invokes a callback, informing that the live view is not
interested in the stream of pictures anymore.

** LiveView
Tis class is responsible to forward pictures to a [[http://zeromq.org/][ZeroMQ]] socket. It has a single
producer / single consumer queue (see the [[concurrency]] section) and a worker
thread to offload the communication.

Interesting:
+ the queue is a non-blocking lock-free queue, that allows minimum interruption
  for the producer;
+ we use the [[http://zguide.zeromq.org/page:all#Ask-and-Ye-Shall-Receive][request-reply pattern]] in ZeroMQ, that allows a simple communication
  between the main executable and the frontend;
+ whenever the queue is full, the images get discarded, and the caller is
  notified. The ~LiveViewController~ timeouts when the queue is full for too
  long and shuts the live view off.

** Homegrown utility libraries
*** meta
This namespace contains some generic patterns and algorithms that do not depend
on the specific details of the project itself. In =Observer.hpp== you can find a
generic implementation of the [[https://en.wikipedia.org/wiki/Observer_pattern][observer pattern]]. A ~Subject~ wants to provide
observers the possibility to register for events. The class takes a variadic
number of type parameters, that will be used in the notification. For example:

#+BEGIN_SRC c++
  Subject<int, float> s;
  auto reg = s.registerObserver([](int a, float b) { print(a, b); });
  s.notify(3, 3.14);
#+END_SRC

in this example we want to notify our observer with an integer and a float. To
do that we just need to declare ~Subject~ with the right parameters. This will
in turn be able to accept observers that respect the ~std::function<void(int,
float)>~ signature.

Interesting:
+ the registration returns a token that when goes out of scope unregisters the
  observer automatically;
+ it is possible to register and unregister observers within notification
  callbacks (re-entrant calls are supported).

Other small utilities are also present, like ~ErasedUniquePtr~, that provides an
unique pointer with an erased deleter. This is an useful workaround to a subtle
problem when you want to forward declare a class and use it in an unique
pointer. For more details see the [[https://akrzemi1.wordpress.com/2013/12/11/type-erasure-part-iii/][type erasure post]] of Andrzej's blog.

*** fs
This namespace contains simple path manipulation utilities to concatenate
multiple paths with a single call:

#+BEGIN_SRC c++
  std::string p = fs::concatPaths("/var/log", bar, "file.txt");
#+END_SRC

*** log
This namespace contains logging utilities. The focus of this library was to
provide a fast and simple logging without using macro shenanigans.

You can use it with a call to a free function, that will return the proper
logger:

#+BEGIN_SRC c++
  log::debug() << "my log here " << 15;
#+END_SRC

There is also a ~reload~ function. When a log rotation occurs it will simply
close the old file (that has been rotated) and open a new file in the same
place. Ignored log levels are implemented by returning a logger that writes to a
~NullSink~, which simply does nothing. Interestingly cryptic is the
implementation of an ~std::outstream~ that does nothing. You can find it in
=log/NullStream.hpp=.

*** concurrency
This namespace contains some classes to deal with concurrency. An interesting
one is ~SpScQueue~, that wraps a worker thread and allows to enqueue work items
for it. The type of the work item is templated, to allow reusability. The queue
is a lock-free implementation that can be chosen at compile time among a
fixed-size and a dynamically allocated one. The former is preferred in case the
maximum queue size is known at compile time.

As a side note I would like to add here that since the project deals with
real-time data, avoiding dynamic allocations can be critical. We used fixed
bound queues in all places for this reason.

Another interesting class is the ~TaskScheduler~ one. It provides the
possibility to schedule tasks at certain time points, ether one-shot or
periodically re-scheduled:

#+BEGIN_SRC c++
  void scheduleAt(Clock::time_point t, Task w);
  void scheduleAfter(Clock::duration d, Task w);
  void scheduleEvery(Clock::duration d, Task w);
#+END_SRC

The work items are processed one after the other in a worker thread, so delays
added by one task impact on the next ones. It is for this reason used only for
short tasks.

*** ipc
This namespace contains classes related to child processes and inter-process
communication. There is a ~forkAndCall~ function, that forks the process, calls
a the given function and returns the function result by using the child process
exit code:

#+BEGIN_SRC c++
  /// This function fork the process, calls the function in the child process,
  /// wait for completion and returns the function return value.
  ChildProcess forkAndCall(std::function<int()> f);
#+END_SRC

The child process itself can be killed or waited. In the latter case, the
function return code will be returned.

There is a ~NamedPipe~ class that provides Linux named pipes. The constructor
creates a fifo with the given file name, and the destructor removes it.

There is an interesting ~PosixSignalHandler~ class, that handles POSIX signals
safely. You need to use it carefully though: initialize it at the beginning of
the main function, before any thread creation, and register all the signal
handlers by using:

#+BEGIN_SRC c++
  void setSignalHandler(int signal, Handler h);
#+END_SRC

where an handler is a callback that takes the signal that just happened:

#+BEGIN_SRC c++
  using Handler = std::function<void(int)>;
#+END_SRC

The POSIX standard says that a lot of functions are not safe to be used within
signal handlers. For example it's not possible to allocate heap memory and call
many standard library functions. We need however to support arbitrary code
execution in the handlers, so to workaround this we use a vector of atomic
booleans, one for each possible signal. Whenever a signal is sent to the
process, the handler flips the corresponding boolean to true. A separate thread
polls that vector, and executes the registered handlers, if any were given. This
allows the signal handler to return immediately and in a safe way:

#+BEGIN_SRC c++
  std::vector<std::atomic<bool>> signalsToBeHandled(SIGRTMAX);

  void sigactionHandler(int sig, siginfo_t* , void* )
  {
    signalsToBeHandled[sig].store(true, std::memory_order_release);
  }
#+END_SRC

and the user-defined handler to be called asynchronously in a separate thread.
In this way arbitrary code can be executed.

There is a simple ~Process~ class, that allows to create child processes, run
them with user given parameters and get the standard output. Nothing fancy.

*** text
In this namespace we have some string manipulation utilities, like ~toString~.
This free function allows to convert in an ~std::string~ any list of printable
objects, e.g.

#+BEGIN_SRC c++
  std::string s = text::toString("my ", std::string("s"), 15, true);
#+END_SRC

Allowing to both covert objects into strings and concatenate them, without the
need of odd ~std::ostringstream~ objects all around the codebase.

A ~TextReplace~ class allows to do replace variable occurrences in a text with
user specified values. For example:

#+BEGIN_SRC c++
  std::ifstream f("file.txt");
  std::ostringstream out;
  text::TextReplace r;
  r.addVariable("var", "X");
  r.addVariable("foo", "BAR");
  r.replaceVariables(f, out);
#+END_SRC

and suppose =file.txt= contains:

#+BEGIN_EXAMPLE
  replace ${var} variables
  with ${foo} their values ${p}.
#+END_EXAMPLE

the result of the replacement will be:

#+BEGIN_EXAMPLE
  replace X variables
  with BAR their values ${p}.
#+END_EXAMPLE

Note that unknown variables are left untouched.

* FastCGI backend
One of the website backend components is ironically in a folder called
=frontend=. The name is unfortunate but it was meant to suggest an interface to
the main executable. It is an executable that communicates with the antifurto
main executable via ZeroMQ, and with the web server through [[https://en.wikipedia.org/wiki/FastCGI][FastCGI]].

In =main.cpp= there is all the logic:
+ A webserver request is directed to the executable through the standard input
  (which is ignored);
+ a picture is requested to the main antifurto executable through a ZeroMQ
  request;
+ as soon as a reply arrives, it is immediately written to the standard output,
  so that it's caught by the web server.

There are a bunch of utility classes that have been used to make the code
cleaner.

** ZmqLazyPirateClient
This class implements the This class implements the [[http://zguide.zeromq.org/page:all#Client-Side-Reliability-Lazy-Pirate-Pattern][Lazy pirate pattern]] in
ZeroMQ, which is a request-reply transition supporting socket reconnections.
This allows to start and stop the main executable and this one independently.
The connection between them will catch up automatically. When a request-reply
transaction is needed, this class will send the request and wait until the
reply, or a timeout expires. On timeout, the request is sent again, until the
maximum number of retrials is reached. At that point the transaction is
considered failed.

** Stream utilities
The ~StreamRedirector~ class is responsible of redirecting the standard input
and output to FastCGI stream buffers, while ~StreamReader~ allows to buffer
reads from a stream (in this case the standard input).

* Website
I am not so proud of the website code, and I don't recommend looking at it in
detail. I did not have much experience in web development at that time, but I am
still quite happy with the external result. The website is a bunch custom HTML +
JavaScript pages. For the styling and the responsive design I went with the
immortals [[http://getbootstrap.com/][Bootstrap]] and [[https://jquery.com/][JQuery]], while for the server side part I used the now
infamous PHP.

+ commands for starting and stopping the monitoring, and for starting the live
  view are requests to special PHP pages under the =controller/= path, that send
  Posix signals to the main executable
+ the live view is an infinite series of ajax requests to the special =live.jpg=
  image, which is served by the custom FastCGI backend at the server side
+ there is a simple archive with the pictured stored during the last days full
  of PHP hacks.

*NOTE* Website screenshots here
