#+TITLE: Antifurto notes

* Overview
There are the following components in Antifurto:
+ =antifurto= executable, written in C++
+ =antifurto.fgci= executable, written in C++
+ the web interface, written in PHP + bootstrap
+ a bash script to send e-mails
+ a bunch of third party python scripts to send whatsapp messages, upload
  pictures to Dropbox.

** Architecture
The design is heavily based on [[https://en.wikipedia.org/wiki/Observer_pattern][observers]], [[https://en.wikipedia.org/wiki/Type_erasure][type erasure]] and the [[https://en.wikipedia.org/wiki/Composition_over_inheritance][composite reuse
principle]], to minimize dependencies among components. Well, at least it was an
attempt I made to implement the project with those principles in mind.

*TODO*: block diagram with the flow of pictures here. Explain the interactions
between live view and monitoring functionalities.

*** Critique on the design
+ Not safe to put everything in the device, included the server part. This has
  been done to avoid external services.

* Antifurto main executable
** Antifurto class
This class is responsible to start and stop the monitoring and the live view,
orchestrating the resources involved. It uses a ~Config~ structure for the
configuration. It can be used as an external library, since it is
self-contained.

It contains a ~MonitorController~, a ~CameraController~ and a
~LiveViewController~.

Interesting stuff:
+ the way it handles start and stop
+ it uses PIMPL pattern to hide all the dependencies to the outside

** MonitorController
This class is the main controller that handls the monitoring functionality. It
delegates to its sub-components tasks such as motion detection, and
notification. Whenever a picture is captured, it is passed along by calling
~examinePicture~:

#+BEGIN_SRC c++
  void examinePicture(const Picture& picture);
#+END_SRC

Whenever some motion is detected, the capture rate is increased, and if the
motion continues, the notifications are fired.

Interesting stuff:
+ it uses two callbacks to ask for a change in the capture rate, and for
  enabling / disabling the capture.

** CameraController
This class is responsible to take pictures from a camera at a given rate. An
user of this class can register an observer and specify the rate at which the
pictures have to be taken. Every time a picture is taken, the observer callback
is called. If multiple observers are interested in different capture rates, the
minimum rate is used. This means that an observer specifies the minimum speed,
not the exact one.

To implement this functionality, in a separate thread a ~Metronome~ class sleeps
the required time, and then the ~Camera~ class takes a picture. Every time an
observer is registered or de-registered, the sleep time is updated.

** Camera
The camera type is statically determined in =StaticConfig.hpp=. In the
Raspberry-Pi case, there is a homegrown version implemented by ~PiCamera~, that
uses a slightly modified version of the =picam= library, that I found [[http://robotblogging.blogspot.nl/2013/10/an-efficient-and-simple-c-api-for.html][here]]. This
library is a simple interface on top of the Raspberry [[https://github.com/mbrt/userland][userland]] library I forked
just to ease the build. To capture images outside the Raspberry world I instead
opted for the [[http://opencv.org/][OpenCV]] library and implemented ~CvCamera~. Now, I have to admit
that the ~CvCaptureRAII~ class might look a bit weird, but it was an attempt to
implement the camera resource through [[https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization][RAII]]. I took inspiration from Martinho
Fernandez [[https://rmf.io/cxx11/rule-of-zero][rule of zero]] blog post and the [[http://scottmeyers.blogspot.nl/2014/03/a-concern-about-rule-of-zero.html][concern about the rule of zero]] by Scott
Meyers. To discuss this in detail I would need an entire blog post in itself, so
I'll just point you to these valuable resources. To be honest I'm not very
satisfied by its look and feel now, so maybe refer to the ~PiCamera~
implementation, it's just a one liner:

#+BEGIN_SRC c++
  std::unique_ptr<CCamera, void(*)(CCamera*)> capture_;
#+END_SRC

It uses the non-so-well-known custom deleter feature of ~std::unique_ptr~.
Again, look at Fernandez post for an explanation on why I didn't just
implemented a stupid destructor for ~PiCamera~.

Since these two different implementations are not intended to be used in the
same codebase, I didn't introduce any common interface, and just used a compile
time define and a ~typedef~ to switch between them:

#+BEGIN_SRC c++
  namespace antifurto {
  namespace config {

  #if defined(ANTIFURTO_RASPBERRY)
      using Camera = antifurto::PiCamera;
  #else
      using Camera = antifurto::CvCamera;
  #endif

  }}
#+END_SRC

The code will simply refer to the ~antifurto::config::Camera~ type to get a
capture resource. I just needed to make sure their public interface (i.e. the
public methods) are the same, so the two classes could be used interchangeably.

** LiveViewController
This class starts and stops the live view functionality. It doesn't implement
the functionality itself; it just controls the lifetime of a ~LiveView~ object.
From the outside it takes pictures and start and stop commands. Whenever a
picture comes, it is forwarded to the internal ~LiveView~ object, which in turn
answer if it has been able to process the picture or not. After a certain
timeout with the live view not progressing, the view is stopped:

#+BEGIN_SRC c++
  if (liveView_->addPicture(p))
      lastPictureWrittenTime_ = system_clock::now();
  else if (system_clock::now() - lastPictureWrittenTime_ > timeout_)
      stop();
#+END_SRC

The ~stop~ function invokes a callback, informing that the live view is not
interested in the stream of pictures anymore.

** LiveView
*TODO*

** Homegrown utility libraries
*** meta
*** fs
*** log
*** concurrency
*** ipc
*** text
